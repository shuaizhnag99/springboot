package com.ule.uhj.sldProxy.controller;

import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ule.uhj.provider.yitu.service.SampleCodeV3PairVerify;
import com.ule.uhj.provider.yitu.util.baiduface.AuthService;
import com.ule.uhj.provider.yitu.util.baiduface.GsonUtils;
import com.ule.uhj.provider.yitu.util.baiduface.HttpUtil;
import com.ule.uhj.sld.util.Check;
import com.ule.uhj.sld.util.Convert;
import com.ule.uhj.sldProxy.service.InterfaceAccessInfoService;
import com.ule.uhj.sldProxy.util.PropertiesHelper;

@Controller
@RequestMapping("/offer")
public class InterfaceOfferController {
	private static Logger log = LoggerFactory.getLogger(InterfaceOfferController.class);
	
	@Autowired
	private InterfaceAccessInfoService interfaceAccessInfoService;
	
	public static final String APP_ID_OCR = PropertiesHelper.getDfs("APP_ID_OCR");
	public static final String API_KEY_OCR = PropertiesHelper.getDfs("API_KEY_OCR");
	public static final String SECRET_KEY_OCR = PropertiesHelper.getDfs("SECRET_KEY_OCR");

	public static final String APP_ID_FACE = PropertiesHelper.getDfs("APP_ID_FACE");
	public static final String API_KEY_FACE = PropertiesHelper.getDfs("API_KEY_FACE");
	public static final String SECRET_KEY_FACE = PropertiesHelper.getDfs("SECRET_KEY_FACE");
	
	@RequestMapping("/queryIdCardOcrInfo")
    @ResponseBody
    public String queryIdCardOcrInfo(@RequestBody Map param) throws Exception{
		String idcardIdentificate = "https://aip.baidubce.com/rest/2.0/ocr/v1/idcard";
        String imageUrl = Convert.toStr(param.get("imageUrl"));
        String imgStr = SampleCodeV3PairVerify.getBase46StringByUrl(imageUrl);
        String idCardSide =Convert.toStr(param.get("sideType"));
        // 识别身份证正面id_card_side=front;识别身份证背面id_card_side=back;
        if(Check.isBlank(imageUrl)||Check.isBlank(idCardSide)){
        	throw new Exception("queryIdCardOcrInfo error...参数不能为空");
        }
        String params = "id_card_side="+idCardSide+"&" + URLEncoder.encode("image", "UTF-8") + "="
                + URLEncoder.encode(imgStr, "UTF-8");
        String accessToken = AuthService.getAuth(API_KEY_OCR, SECRET_KEY_OCR);
        String result = HttpUtil.post(idcardIdentificate, accessToken, params);
        log.info("queryIdCardOcrInfo result="+result);

        String merchantId = Convert.toStr(param.get("merchantId"));
    	interfaceAccessInfoService.saveInterfaceRecord(com.alibaba.fastjson.JSONObject.toJSONString(param), result,Convert.toStr(param.get("userOnlyId")),"8102",merchantId.equals("02")?"邮乐卡":"海外业务");
        return result;
    }
	
	@RequestMapping("/idCardAuth")
    @ResponseBody
    public String idCardAuth(@RequestBody Map param) throws Exception{
		long t1 = System.currentTimeMillis();
		log.info("idCardAuth start time ="+t1);
		String url = "https://aip.baidubce.com/rest/2.0/face/v3/person/verify";
	    HashMap<String, String> options = new HashMap<String, String>();
	    options.put("quality_control", "NORMAL");
	    options.put("liveness_control", "LOW");
	    String image = Convert.toStr(param.get("imageUrl"));
	    if(image!=null){
	    	String imageContent = SampleCodeV3PairVerify.getBase46StringByUrl(image);
	    	long t2 = System.currentTimeMillis();
			log.info("idCardAuth cost t2-t1 ="+(t2-t1));
		    Map<String, Object> map = new HashMap<String, Object>();
	        map.put("image", imageContent);
	        map.put("image_type", "BASE64");
	        map.put("id_card_number", Convert.toStr(param.get("certNo")));
	        map.put("liveness_control", "NONE");
	        map.put("name", Convert.toStr(param.get("userName")));
	        map.put("quality_control", "LOW");
	        String params = GsonUtils.toJson(map);
	        long tx = System.currentTimeMillis();
			log.info("idCardAuth cost tx-t2 ="+(tx-t2));
	        String accessToken = AuthService.getAuth(API_KEY_FACE, SECRET_KEY_FACE);
	        long t3 = System.currentTimeMillis();
			log.info("idCardAuth cost t3-t2 ="+(t3-t2));
	        String result = HttpUtil.post(url, accessToken, "application/json", params);
	        long t4 = System.currentTimeMillis();
			log.info("idCardAuth cost t4-t3 ="+(t4-t3));
	        //保存接口记录
	        String merchantId = Convert.toStr(param.get("merchantId"));
	        String requestStr =com.alibaba.fastjson.JSONObject.toJSONString(param);
	        String userOnlyId =Convert.toStr(param.get("userOnlyId"));
	        String source = merchantId.equals("02")?"邮乐卡":"海外业务";
	    	interfaceAccessInfoService.saveInterfaceRecord(requestStr, result,userOnlyId,"8104",source);
	    	long t5 = System.currentTimeMillis();
			log.info("idCardAuth cost t5-t4 ="+(t5-t4));
			log.info("idCardAuth cost total ="+(t5-t1));
	    	return result;
	    }else{
	    	log.info("imageUrl can not be null...");
	    	throw new Exception("imageUrl can not be null...");
	    }
    }
	
	public static void main(String[] args) {
		String accessToken = AuthService.getAuth(API_KEY_FACE, SECRET_KEY_FACE);
		System.out.println(accessToken);
		String accessToken1 = AuthService.getAuth(API_KEY_FACE, SECRET_KEY_FACE);
		System.out.println(accessToken);
	}
}
