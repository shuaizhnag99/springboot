package com.ule.uhj.provider.yitu.service;

import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.zip.GZIPInputStream;

import org.apache.commons.io.output.ByteArrayOutputStream;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import com.alibaba.fastjson.JSON;
import com.ule.uhj.provider.yitu.util.tongdon.HttpUtils;
import com.ule.uhj.sld.util.Convert;
import com.ule.uhj.sldProxy.util.PropertiesHelper;

public class TongDunService {
	protected static Log log = LogFactory.getLog(TongDunService.class);
	
	public static String host=PropertiesHelper.getDfs("TONG_DON_IP");
//	public static String partner_code=PropertiesHelper.getDfs("ORG_CODE");
//	public static String partner_key=PropertiesHelper.getDfs("KEY");
	
	public static String partner_code="zgd_mohe";
	public static String partner_key="bbcee42b572841e1a9562e058a6fbfbc";
	
	
	//方法
	public static String create="/task.unify.create/v3";						//创建任务
	public static String acquire="/yys.unify.acquire/v3";						//登录验证
	public static String retry ="/task.unify.retry/v3";							//验证码
	public static String query="/task.unify.query/v3";							//查询任务结果
	
	public static String moHeReport="/report.task.query/v2";					//魔盒报告
	
	public static String rstpwdCreate ="/yys.rstpwd.create/v1"; 				//重置密码(创建)
	public static String rstpwdSubmit ="/yys.rstpwd.submit/v1"; 				//重置密码(验证)
	
	
	/**
	 * 提供给web端使用 直接验证
	 * @param param(user_mobile=user_name、real_name、identity_code、user_pass)
	 * @return
	 * @throws Exception
	 */
	public String firstAcquire(Map<String,Object> param)throws Exception {
		
		String createResult =create(param);
		
		Map<String,Object> createMap = getMapFromJsonString(createResult);
		String code=Convert.toStr(createMap.get("code"));
		
		if(!"0".equals(code)){
			return createResult;
		}
		String task_id=Convert.toStr(createMap.get("task_id"));
		
		param.put("task_id", task_id);
		String acquireResult =acquire(param);
		
		return acquireResult;
	}
	
	
	
	/**
	 * 任务创建
	 * @param param
	 * @return
	 * @throws Exception
	 */
	public String create(Map<String,Object> param)throws Exception {
		String url		=	host +create;
		String queryParam = "?partner_code="+partner_code+"&partner_key="+partner_key;
		Map<String, String> headers=null;
		
		String user_mobile	=	Convert.toStr(param.get("user_mobile"));
		String real_name		=	Convert.toStr(param.get("real_name"));
		String identity_code	=	Convert.toStr(param.get("identity_code"));
		  
		String body = "channel_code=100000&channel_type=YYS&real_name="+real_name+"&identity_code="+identity_code+"&user_mobile="+user_mobile;
		
		log.info(" TongDonService create request url:"+url+"queryParam:"+queryParam+",body："+body);
		
		String rs =HttpUtils.executeHttpPost(url, queryParam, headers, body);
		
		log.info(" TongDonService create response:"+rs);
		
		return rs; 		
		
		
//		{
//			"code":0,
//			"data":{
//			"channel_code":"100000",
//			"channel_type":"YYS",
//			"created_time":"2017-12-18 10:14:04",
//			"identity_code":"340881198609226517",
//			"real_name":"伍海涛",
//			"user_mobile":"18201857659"
//			},
//			"message":"任务创建成功",
//			"task_id":"TASKYYS100000201712181014040711030317"
//			}
	}
	
	/**
	 * 登录验证
	 * @param param
	 * @return
	 * @throws Exception
	 */
	public String acquire(Map<String,Object> param)throws Exception {
		String url		=	host +acquire;
		String queryParam = "?partner_code="+partner_code+"&partner_key="+partner_key;
		Map<String, String> headers=null;
		
		String task_id	=	Convert.toStr(param.get("task_id"));
		String user_name	=	Convert.toStr(param.get("user_name"));
		String user_pass	=	Convert.toStr(param.get("user_pass"));
		String sms_code	=	Convert.toStr(param.get("sms_code"));		
		String task_stage	=	Convert.toStr(param.get("task_stage"));
		String request_type = Convert.toStr(param.get("request_type"));
		
		if("null".equals(sms_code)){
			sms_code="";
		}
		
		if(StringUtils.isBlank(task_stage)){
			task_stage ="INIT";
		}
		if(StringUtils.isBlank(request_type)){
			request_type="submit";
		}
		
		StringBuilder body = new StringBuilder("task_id=");
			body.append(task_id);
		if(StringUtils.isNotBlank(user_name)){
			body.append("&user_name=");
			body.append(user_name);			
		}
		if(StringUtils.isNotBlank(user_pass)){
			body.append("&user_pass=");
			body.append(user_pass);			
		}
		if(StringUtils.isNotBlank(sms_code)){
			body.append("&sms_code=");
			body.append(sms_code);			
		}
			body.append("&task_stage=");
			body.append(task_stage);
			body.append("&request_type=");
			body.append(request_type);
		
		String bodyStr =body.toString();
			
		log.info(" TongDonService acquire request url:"+url+"queryParam:"+queryParam+",body："+bodyStr);
		String submitRs =HttpUtils.executeHttpPost(url, queryParam, headers, bodyStr);
		log.info(" TongDonService acquire response:"+submitRs);
		
		
		Map<String,Object> createMap = getMapFromJsonString(submitRs);
		String code=Convert.toStr(createMap.get("code"));
		
		if(!"100".equals(code)){
			return submitRs;
		}
		
		Thread.sleep(10000);
		
		bodyStr =bodyStr.replace("submit", "query");
		log.info(" TongDonService 10miao acquire request url:"+url+"queryParam:"+queryParam+",body："+bodyStr);
		String queryRs =HttpUtils.executeHttpPost(url, queryParam, headers, bodyStr);
		log.info(" TongDonService 10miao acquire response:"+queryRs);
		
		Map<String,Object> queryMap = getMapFromJsonString(queryRs);
		String queryCode=Convert.toStr(queryMap.get("code"));
		if("100".equals(queryCode)){
				queryMap.put("bodyStr", bodyStr);
				queryRs=JSON.toJSONString(queryMap);
		}
		log.info(" TongDonService acquire callback:"+queryRs);
		return queryRs; 		
		
	}
	
	/**
	 * 验证码
	 * @param param
	 * @return
	 * @throws Exception
	 */
	public String retry(Map<String,Object> param)throws Exception {
		String url		=	host +retry;
		String queryParam = "?partner_code="+partner_code+"&partner_key="+partner_key;
		Map<String, String> headers=null;
		
		String task_id	=	Convert.toStr(param.get("task_id"));
		
		String body = "task_id="+task_id;
		
		log.info(" TongDonService create request url:"+url+"queryParam:"+queryParam+",body："+body);
		String rs =HttpUtils.executeHttpPost(url, queryParam, headers, body);
		log.info(" TongDonService create response:"+rs);
		
		return rs; 		
	}
	
	/**
	 * 查询任务结果
	 * @param param
	 * @return
	 * @throws Exception
	 */
	public String moHeReport(Map<String,Object> param)throws Exception {
		String url		=	host +moHeReport;
		String queryParam = "?partner_code="+partner_code+"&partner_key="+partner_key;
		Map<String, String> headers=null;
		
		String task_id	=	Convert.toStr(param.get("task_id"));
		
		String body = "task_id="+task_id;
		
		log.info(" TongDonService moHeReport request url:"+url+"queryParam:"+queryParam+",body："+body);
		String rs =HttpUtils.executeHttpPost(url, queryParam, headers, body);
		log.info(" TongDonService moHeReport response:"+rs);
		
		return rs; 		
	}
	
	
	/**
	 * 查询任务结果
	 * @param param
	 * @return
	 * @throws Exception
	 */
	public String query(Map<String,Object> param)throws Exception {
		String url		=	host +query;
		String queryParam = "?partner_code="+partner_code+"&partner_key="+partner_key;
		Map<String, String> headers=null;
		
		String task_id	=	Convert.toStr(param.get("task_id"));
		
		String body = "task_id="+task_id;
		
		log.info(" TongDonService create request url:"+url+"queryParam:"+queryParam+",body："+body);
		String rs =HttpUtils.executeHttpPost(url, queryParam, headers, body);
		log.info(" TongDonService create response:"+rs);
		
		return rs; 		
	}
	
	
	/**
	 * 重置密码(创建)
	 * @param param
	 * @return
	 * @throws Exception
	 */
	public String rstpwdCreate(Map<String,Object> param)throws Exception {
		String url		=	host +rstpwdCreate;
		String queryParam = "?partner_code="+partner_code+"&partner_key="+partner_key;
		Map<String, String> headers=null;
		
		String user_mobile	=	Convert.toStr(param.get("user_mobile"));
		
		String body = "user_mobile="+user_mobile;
		
		log.info(" TongDonService rstpwdCreate request url:"+url+"queryParam:"+queryParam+",body："+body);
		String rs =HttpUtils.executeHttpPost(url, queryParam, headers, body);
		log.info(" TongDonService rstpwdCreate response:"+rs);
		
		Map<String,Object> createMap = getMapFromJsonString(rs);
		String code=Convert.toStr(createMap.get("code"));
		
		if(!"0".equals(code)){
			return rs;
		}
		
		rs =rstpwdSubmit(createMap);
				
		return rs; 		
		
//		{
//		    "code": 0,
//		    "data": {
//		        "created_time": "2017-12-18 15:20:09",
//		        "user_mobile": "18201857659"
//		    },
//		    "message": "任务创建成功",
//		    "task_id": "TASKRSTPWD100000201712181520090730014"
//		}
		
		
//		{
//		    "code": 139,
//		    "data": {
//		        "data_message": "发送免费短信指令 “MMCZ” 到10086 进行密码重置"
//		    },
//		    "message": "请根据提示信息重置密码",
//		    "task_id": "TASKRSTPWD100000201712181520410740016"
//		}
		
	}
	
	
	/**
	 * 重置密码(验证)
	 * @param param
	 * @return
	 * @throws Exception
	 */
	public String rstpwdSubmit(Map<String,Object> param)throws Exception {
		String url		=	host +rstpwdSubmit;
		String queryParam = "?partner_code="+partner_code+"&partner_key="+partner_key;
		Map<String, String> headers=null;
		
		String task_id	=	Convert.toStr(param.get("task_id"));
		String sms_code	=	Convert.toStr(param.get("sms_code"));					//手机验证码
		String auth_code	=	Convert.toStr(param.get("auth_code"));				//图片验证码
		String identity_code	=	Convert.toStr(param.get("identity_code"));		//身份证号码
		String real_name	=	Convert.toStr(param.get("real_name"));				//真实姓名
		String user_pass	=	Convert.toStr(param.get("user_pass"));				//新服务密码
		String task_stage	=	Convert.toStr(param.get("task_stage"));
		
		if(StringUtils.isBlank(task_stage)){
			task_stage ="INIT";
		}
		
		StringBuilder body = new StringBuilder("task_id=");
			body.append(task_id);
		if(StringUtils.isNotBlank(sms_code)){
			body.append("&sms_code=");
			body.append(sms_code);			
		}
		if(StringUtils.isNotBlank(auth_code)){
			body.append("&auth_code=");
			body.append(auth_code);			
		}
		if(StringUtils.isNotBlank(identity_code)){
			body.append("&identity_code=");
			body.append(identity_code);			
		}
		if(StringUtils.isNotBlank(real_name)){
			body.append("&real_name=");
			body.append(real_name);			
		}
		if(StringUtils.isNotBlank(user_pass)){
			body.append("&user_pass=");
			body.append(user_pass);			
		}
			body.append("&task_stage=");
			body.append(task_stage);
		
		String bodyStr = body.toString();
		
		log.info(" TongDonService rstpwdSubmit request url:"+url+"queryParam:"+queryParam+",body："+bodyStr);
		String rs =HttpUtils.executeHttpPost(url, queryParam, headers, bodyStr);
		log.info(" TongDonService rstpwdSubmit response:"+rs);
		
		return rs; 		
	}
	
	
	

	
	public static void main(String[] args) throws Exception {
		String type=null;	
		
		type="create";
		type="acquire";
//		type="retry";
//		type="query";	
//		type="rstpwdCreate";
//		type="rstpwdSubmit";
		type ="moHeReport";

		
		TongDunService s = new TongDunService();
		Map<String, Object> param =new HashMap<String, Object>();
		
//		String phone	=	"18201857659";
//		String servicePassword=	"861477";
		String name		=	"伍海涛";
		String idCard	=	"340881198609226517";
		
//		String phone	=	"18516329918";
//		String servicePassword=	"914129";
//		String name		=	"余兵兵";
//		String idCard	=	"362226199009140632";
		
		String phone	=	"13399533011";
		String servicePassword=	"810235";
//		String name		=	"潘星";
//		String idCard	=	"340221199009050031";
		
		// 二次验证测试
//		String phone	=	"18087486480";
//		String servicePassword=	"150310";
//		String name		=	"余兵兵";
//		String idCard	=	"362226199009140632";
		

		String task_id    ="TASKYYS100000201801261538190661530970";
		if("create".equals(type)){
			//init方法测试
			param.put("identity_code", idCard);
			param.put("real_name", name);
			param.put("user_mobile", phone);
			param.put("user_name", phone);
			param.put("user_pass", servicePassword);			
			
			String loginform =s.firstAcquire(param);
			
		}else if("acquire".equals(type)){
			//提交表单验证
			String sms_code="383704";
			String auth_code="";
			
			String task_stage = "QUERY";
			String request_type ="submit";
			param.put("task_id", task_id);
			param.put("user_name", phone);
			param.put("user_pass", servicePassword);
			param.put("sms_code", sms_code);
			param.put("auth_code", auth_code);
			param.put("task_stage", task_stage);
			param.put("request_type", request_type);
			s.acquire(param);
		}else if("retry".equals(type)){
			//验证码
			param.put("task_id", task_id);
			s.retry(param);
		}else if("query".equals(type)){
			//查询报告
			param.put("task_id", task_id);
			s.query(param);
		}else if("rstpwdCreate".equals(type)){
			//重置密码(创建)
			param.put("user_mobile", phone);
			s.rstpwdCreate(param);
		}else if("rstpwdSubmit".equals(type)){
			//重置密码(验证)
			
			String sms_code		=	"";				//手机验证码
			String auth_code	=	"";				//图片验证码
			String identity_code=	"";				//身份证号码
			String real_name	=	"";				//真实姓名
			String user_pass	=	"";				//新服务密码
			String task_stage	=	"";
			
			
			param.put("task_id", task_id);
			param.put("sms_code", sms_code);
			param.put("auth_code", auth_code);
			param.put("identity_code", identity_code);
			param.put("real_name", real_name);
			param.put("user_pass", user_pass);
			param.put("task_stage", task_stage);
			s.rstpwdSubmit(param);
		}else if("moHeReport".equals(type)){
			//查询魔盒报告
			param.put("task_id", task_id);
//			s.moHeReport(param);
			
			String str = "";  
			
			String sss = gunzip(str);
			
			System.out.println(sss);
		}
	}
	
	 
	 private Map getMapFromJsonString(String jsonString) {
		JSONObject jsonObject = JSONObject.fromObject(jsonString);
		Iterator keyIter = jsonObject.keys();

		Map valueMap = new HashMap();
		while (keyIter.hasNext()) {
			String key = (String) keyIter.next();
			Object value = jsonObject.get(key);
			valueMap.put(key, value);
		}
		return valueMap;
	}
	 
	 
	 private JSONObject getJSONObjectFromJosn(JSONObject json,String key){
			JSONObject value=null;
			if(null!=json&&json.containsKey(key)){
				if(json.getJSONObject(key)!=null&&!json.getJSONObject(key).isEmpty()){
					
					value=json.getJSONObject(key);
				}
			}
			return value;
		}
	 

	 /**
	 *
	 * <p>Description:使用gzip进行解压缩</p>
	 * @param compressedStr
	 * @return
	 */
	 public static String gunzip(String compressedStr){
	 
	 ByteArrayOutputStream out= new ByteArrayOutputStream();
	 ByteArrayInputStream in=null;
	 GZIPInputStream ginzip=null;
	 byte[] compressed=null;
	 String decompressed = null;
	 try {
	 // 对返回数据BASE64解码
	 compressed = new sun.misc.BASE64Decoder().decodeBuffer(compressedStr);
	 in=new ByteArrayInputStream(compressed);
	 ginzip=new GZIPInputStream(in);
	 
	 // 解码后对数据gzip解压缩
	 byte[] buffer = new byte[1024];
	 int offset = -1;
	 while ((offset = ginzip.read(buffer)) != -1) {
	 out.write(buffer, 0, offset);
	 }
	 
	 // 最后对数据进行utf-8转码
	 decompressed=out.toString("utf-8");
	 } catch (IOException e) {
		 log.error("gunzip error ", e);
	 } finally {
		 
	 }
	 return decompressed;
	 }
	 
}
