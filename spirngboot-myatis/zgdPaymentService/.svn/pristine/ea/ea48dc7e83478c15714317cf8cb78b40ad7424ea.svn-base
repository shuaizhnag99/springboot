package com.ule.uhj.util;

import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import redis.clients.jedis.Jedis;

import com.ule.cachecloud.utils.CacheCloudClientUtil;
import com.ule.cachecloud.utils.CompressUtils;
import com.ule.cachecloud.utils.SerializeHelper;

public class RedisUtils {

	private final static Logger ERROR = LogManager.getLogger("error");
	
	public static String get(String key) {
		Jedis jedis = null;
		try{
			jedis = CacheCloudClientUtil.getJedis();
			return jedis.get(key);
		}catch(Exception e) {
			ERROR.error(e.getMessage(), e);
		}finally{
			if(jedis != null)jedis.close();
		}
		return null;
	}
	
	public static String get(String key, String proname) {
		Jedis jedis = null;
		try{
			jedis = CacheCloudClientUtil.getJedis();
			return jedis.get(key);
		}catch(Exception e) {
			ERROR.error(e.getMessage(), e);
		}finally{
			if(jedis != null)jedis.close();
		}
		return null;
	}
	
	public static void set(String key, Object value, int seconds, String proname) {
		try {
			byte[] e;
			byte[] compressBytes;
			if (seconds <= 0) {
				e = SerializeHelper.serialize(value);
				compressBytes = CompressUtils.fastCompress(e);
				if (null != e) {
					CacheCloudClientUtil.set(key, compressBytes, proname);
				}
			} else {
				e = SerializeHelper.serialize(value);
				compressBytes = CompressUtils.fastCompress(e);
				if (null != e) {
					CacheCloudClientUtil.set(key, compressBytes, seconds, proname);
				}
			}
		} catch (Exception e) {
			ERROR.error(e.getMessage(), e);
		}

	}
	
	public static String hget(String key, String field) {
		Jedis jedis = null;
		try{
			jedis = CacheCloudClientUtil.getJedis();
			return jedis.hget(key, field);
		}catch(Exception e) {
			ERROR.error(e.getMessage(), e);
		}finally{
			if(jedis != null)jedis.close();
		}
		return null;
	}
	
	public static Map<String, String> hgetAll(String key) {
		Jedis jedis = null;
		try{
			jedis = CacheCloudClientUtil.getJedis();
			return jedis.hgetAll(key);
		}catch(Exception e) {
			ERROR.error(e.getMessage(), e);
		}finally{
			if(jedis != null)jedis.close();
		}
		return null;
	}

	public static Object getHighObject(String key) {
		Object bean = null;
		try {
			byte[] bytes = CacheCloudClientUtil.getObjectBytes(key);
			byte[] e = CompressUtils.deCompress(bytes);
			if (null != bytes) {
				bean = SerializeHelper.unserialize(e);
			}
		} catch (Exception e) {
			ERROR.error(e.getMessage(), e);
		}

		return bean;
	}
	
	public static Object getHighObject(String key, String proname) {  
    	byte[] bytes;
    	Object bean = null;
		try {
			bytes = CacheCloudClientUtil.getObjectBytes(key,proname);
			byte[] recoverBytes = CompressUtils.deCompress(bytes);
			if(null!= bytes) {
				bean = SerializeHelper.unserialize(recoverBytes);
			}
		} catch (Exception e) {
			ERROR.error(e.getMessage(), e);
		}
		return bean;
    }
	
	
	
}
